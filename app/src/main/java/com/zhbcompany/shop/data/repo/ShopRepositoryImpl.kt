package com.zhbcompany.shop.data.repo

import android.util.Log
import com.zhbcompany.shop.data.local.ShopDao
import com.zhbcompany.shop.data.mapper.toLocalShopItem
import com.zhbcompany.shop.data.mapper.toLocalShopItemsFromRemote
import com.zhbcompany.shop.data.mapper.toRemoteShopItem
import com.zhbcompany.shop.data.mapper.toShopItem
import com.zhbcompany.shop.data.mapper.toShopItemsFromLocal
import com.zhbcompany.shop.data.remote.ShopApi
import com.zhbcompany.shop.domain.model.ShopItem
import com.zhbcompany.shop.domain.repo.ShopRepository
import kotlinx.coroutines.CoroutineDispatcher
import kotlinx.coroutines.withContext
import retrofit2.HttpException
import java.net.ConnectException
import java.net.UnknownHostException

class ShopRepositoryImpl(
    private val dao: ShopDao,
    private val api: ShopApi,
    private val dispatcher: CoroutineDispatcher
) : ShopRepository {

    override suspend fun getAllShopItems(): List<ShopItem> {
        getAllShopItemsFromRemote()
        return dao.getAllShopItems().toShopItemsFromLocal()
    }

    override suspend fun getAllShopItemsFromLocal(): List<ShopItem> {
        return dao.getAllShopItems().toShopItemsFromLocal()
    }

    override suspend fun getAllShopItemsFromRemote() {
        return withContext(dispatcher) {
            try {
                refreshRoomCache()
            } catch (e: Exception) {
                when (e) {
                    is UnknownHostException, is ConnectException, is HttpException -> {
                        Log.e("HTTP", "Error: No data from Remote")
                        if (isCacheEmpty()) {
                            Log.e("Cache", "Error: No data from local Room cache")
                            throw Exception("Error: Device offline and\nno data from local Room cache")
                        }
                    }

                    else -> throw e
                }
            }
        }
    }

    private suspend fun refreshRoomCache() {
        val remoteBooks = api.getAllShopItems()
        dao.addAllShopItems(remoteBooks.toLocalShopItemsFromRemote())
    }

    private fun isCacheEmpty(): Boolean {
        val empty = dao.getAllShopItems().isEmpty()
        return empty
    }

    override suspend fun getShopItemById(id: Int): ShopItem? {
        return dao.getShopItemById(id)?.toShopItem()
    }

    /**
     * Adds a new [ShopItem] to both the local database and the remote server.
     *
     * @param item The [ShopItem] to be added. The [ShopItem.id] will be ignored and will be generated by the local database.
     *
     * @return Nothing.
     *
     * @throws Exception If there is an error while adding the [ShopItem] to the local database or the remote server.
     */
    override suspend fun addShopItem(item: ShopItem) {
        val newId = dao.addShopItem(item.toLocalShopItem())
        val id = newId.toInt()
        val url = "shop/$id.json"
        api.addShopItem(url, item.toRemoteShopItem().copy(id = id))
    }

    override suspend fun updateShopItem(item: ShopItem) {
        dao.addShopItem(item.toLocalShopItem())
        api.updateShopItem(item.id, item.toRemoteShopItem())
    }

    override suspend fun deleteShopItem(item: ShopItem) {
        try {
            val response = api.deleteShopItem(item.id)
            if (response.isSuccessful) {
                Log.i("API_DELETE", "Response Successful")
            } else {
                Log.i("API_DELETE", "Response Unsuccessful")
                Log.i("API_DELETE", response.message())
            }
        } catch (e: Exception) {
            when (e) {
                is UnknownHostException, is ConnectException, is HttpException -> {
                    Log.e("HTTP", "Error: Could not delete")
                }

                else -> throw e
            }
        }
        dao.deleteShopItem(item.toLocalShopItem())
    }
}